Merge Sort on Doubly Linked List 

Given Pointer/Reference to the head of a doubly linked list of N nodes, the task is to Sort the given doubly linked list using Merge Sort in both non-decreasing and non-increasing order.

Example 1:

Input:
N = 8
value[] = {7,3,5,2,6,4,1,8}
Output:
1 2 3 4 5 6 7 8
8 7 6 5 4 3 2 1
Explanation: After sorting the given
linked list in both ways, resultant
matrix will be as given in the first
two line of output, where first line
is the output for non-decreasing
order and next line is for non-
increasing order.
Example 2:

Input:
N = 5
value[] = {9,15,0,-1,0}
Output:
-1 0 0 9 15
15 9 0 0 -1
Explanation: After sorting the given
linked list in both ways, the
resultant list will be -1 0 0 9 15
in non-decreasing order and 
15 9 0 0 -1 in non-increasing order.
Your Task:
The task is to complete the function sortDoubly() which sorts the doubly linked list. The printing is done automatically by the driver code.

Constraints:
1 <= N <= 105


class LinkedList
{
    //Function to sort the given doubly linked list using Merge Sort.
    static Node sortDoubly(Node head)
    {
        int c=count(head);
        int a[]=new int[c];
        int i=0;
        for(Node ptr=head;ptr!=null;ptr=ptr.next)
        {
            a[i++]=ptr.data;
        }
        task(a,0,c-1);
        i=0;
        for(Node ptr=head;ptr!=null;ptr=ptr.next)
        {
            ptr.data=a[i++];
        }
        return head;
    }
    static int count (Node head)
    {
        int c=0;
        for(Node ptr=head;ptr!=null;ptr=ptr.next)
        {
            c++;
        }
        return c;
    }
    static void task(int a[] , int i , int j)
    {
        if(i<j)
        {
            int m=(i+j)/2;
            task(a,i,m);
            task(a,m+1,j);
            task1(a,i,m,j);
        }
    }
    static void task1(int a[] , int s , int m , int e)
    {
        int i=s,j=m+1,k=0;
        int b[]=new int[e-s+1];
        while(i<=m&&j<=e)
        {
            if(a[j]<=a[i])
            {
                b[k++]=a[j++];
            }
            else
            {
                b[k++]=a[i++];
            }
        }
        while(i<=m)
        {
            b[k++]=a[i++];
        }
        while(j<=e)
        {
            b[k++]=a[j++];
        }
        for(int p=s;p<=e;p++)
        {
            a[p]=b[p-s];
        }
    }
}