107. Binary Tree Level Order Traversal II

Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000


class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> nm=new ArrayList<>();
        if(root==null)
        {
            return nm;
        }
        Queue<TreeNode> kk=new LinkedList<>();
        kk.offer(root);
        int n=0;
        while(!kk.isEmpty())
        {
            int p=kk.size();
            List<Integer> k=new ArrayList<>();
            for(int i=1;i<=p;i++)
            {
                if(kk.peek().left!=null)
                {
                    kk.offer(kk.peek().left);
                }
                if(kk.peek().right!=null)
                {
                    kk.offer(kk.peek().right);
                }
                k.add(kk.poll().val);
            }
            nm.add(0,k);
        }
        return nm;
    }
}