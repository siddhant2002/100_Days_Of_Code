Detect cycle in a directed graph 
Medium Accuracy: 30.19% Submissions: 100k+ Points: 4
Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.


Example 1:

Input:



Output: 1
Explanation: 3 -> 3 is a cycle

Example 2:

Input:


Output: 0
Explanation: no cycle in the graph

Your task:
You don’t need to read input or print anything. Your task is to complete the function isCyclic() which takes the integer V denoting the number of vertices and adjacency list as input parameters and returns a boolean value denoting if the given directed graph contains a cycle or not.


Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)


Constraints:
1 ≤ V, E ≤ 105




class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int v, ArrayList<ArrayList<Integer>> adj) {
        boolean k[]=new boolean[v];
        boolean t[]=new boolean[v];
        Arrays.fill(k,true);
        Arrays.fill(t,true);
        for(int i=0;i<v;i++)
        {
            if(k[i])
            {
                if(task(i,k,t,adj))
                {
                    return true;
                }
            }
        }
        return false;
    }
    static boolean task(int n , boolean k[] , boolean p[] , ArrayList<ArrayList<Integer>> adj)
    {
        k[n]=false;
        p[n]=false;
        for(int s:adj.get(n))
        {
            if(k[s])
            {
                if(task(s,k,p,adj))
                {
                    return true;
                }
            }
            else if(!p[s])
            {
                return true;
            }
        }
        p[n]=true;
        return false;
    }
}