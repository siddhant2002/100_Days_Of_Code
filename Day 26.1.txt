Rearrange a linked list 

Given a singly linked list, the task is to rearrange it in a way that all odd position nodes are together and all even positions node are together.
Assume the first element to be at position 1 followed by second element at position 2 and so on.
Note: You should place all odd positioned nodes first and then the even positioned ones. (considering 1 based indexing). Also, the relative order of odd positioned nodes and even positioned nodes should be maintained.

Example 1:

Input:
LinkedList: 1->2->3->4
Output: 1 3 2 4 
Explanation: 
Odd elements are 1, 3 and even elements are 
2, 4. Hence, resultant linked list is 
1->3->2->4.
Example 2:

Input:
LinkedList: 1->2->3->4->5
Output: 1 3 5 2 4 
Explanation: 
Odd elements are 1, 3, 5 and even elements are
2, 4. Hence, resultant linked list is
â€‹1->3->5->2->4.
Your Task:
The task is to complete the function rearrangeEvenOdd() which rearranges the nodes in the linked list as required and doesn't return anything.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ Size of the linked list ≤ 104
0 ≤ value of linked list ≤ 103


class Solution
{
    void rearrangeEvenOdd(Node head)
    {
        ArrayList<Integer> nm=new ArrayList<>();
        ArrayList<Integer> kk=new ArrayList<>();
        int k=1;
        for(Node ptr=head;ptr!=null;ptr=ptr.next,k++)
        {
            if(k%2==0)
            {
                kk.add(ptr.data);
            }
            else
            {
                nm.add(ptr.data);
            }
        }
        Node start=null,fresh,prev=null;
        int p=nm.size();
        for(int i=0;i<p;i++)
        {
            fresh=new Node(nm.get(i));
            if(start==null)
            {
                start=fresh;
            }
            else
            {
                prev.next=fresh;
            }
            prev=fresh;
        }
        p=kk.size();
        for(int i=0;i<p;i++)
        {
            fresh=new Node(kk.get(i));
            if(start==null)
            {
                start=fresh;
            }
            else
            {
                prev.next=fresh;
            }
            prev=fresh;
        }
        for(Node ptr=head;ptr!=null;ptr=ptr.next)
        {
            ptr.data=start.data;
            start=start.next;
        }
    }
}