Rotate Array 

Given an unsorted array arr[] of size N. Rotate the array to the left (counter-clockwise direction) by D steps, where D is a positive integer. 

 

Example 1:

Input:
N = 5, D = 2
arr[] = {1,2,3,4,5}
Output: 3 4 5 1 2
Explanation: 1 2 3 4 5  when rotated
by 2 elements, it becomes 3 4 5 1 2.
Example 2:

Input:
N = 10, D = 3
arr[] = {2,4,6,8,10,12,14,16,18,20}
Output: 8 10 12 14 16 18 20 2 4 6
Explanation: 2 4 6 8 10 12 14 16 18 20 
when rotated by 3 elements, it becomes 
8 10 12 14 16 18 20 2 4 6.
 

Your Task:
Complete the function rotateArr() which takes the array, D and N as input parameters and rotates the array by D elements. The array must be modified in-place without using extra space. 

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

 

Constraints:
1 <= N <= 107
1 <= D <= N
0 <= arr[i] <= 105


class Solution
{
    static void rotateArr(int a[], int d, int n)
    {
        int p[]=new int[d];
        for(int i=0;i<d;i++)
        {
            p[i]=a[i];
        }
        for(int i=0;i<n-d;i++)
        {
            a[i]=a[i+d];
        }
        for(int i=n-d,j=0;i<n;i++,j++)
        {
            a[i]=p[j];
        }
        // for(int i=0;i<n;i++)
        // {
        //     System.out.print(a[i]+" ");
        // }
        // System.out.println();
    }
}