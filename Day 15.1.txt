Detect cycle in a directed graph 
Medium Accuracy: 30.19% Submissions: 100k+ Points: 4
Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.


Example 1:

Input:



Output: 1
Explanation: 3 -> 3 is a cycle

Example 2:

Input:


Output: 0
Explanation: no cycle in the graph

Your task:
You don’t need to read input or print anything. Your task is to complete the function isCyclic() which takes the integer V denoting the number of vertices and adjacency list as input parameters and returns a boolean value denoting if the given directed graph contains a cycle or not.


Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)


Constraints:
1 ≤ V, E ≤ 105


class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int v, ArrayList<ArrayList<Integer>> adj) {
        int a[]=new int[v];
        for(int i=0;i<v;i++)
        {
            for(int s:adj.get(i))
            {
                a[s]++;
            }
        }
        int b[]=new int[v];
        Queue<Integer> nm=new LinkedList<>();
        for(int i=0;i<v;i++)
        {
            if(a[i]==0)
            {
                nm.add(i);
            }
        }
        int m=0;
        while(!nm.isEmpty())
        {
            int p=nm.poll();
            m++;
            for(int s:adj.get(p))
            {
                a[s]--;
                if(a[s]==0)
                {
                    nm.add(s);
                }
            }
        }
        return m==v ? false : true;
    }
}