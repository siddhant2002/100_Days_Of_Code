Merge two sorted linked lists 

Given two sorted linked lists consisting of N and M nodes respectively. The task is to merge both of the list (in-place) and return head of the merged list.
 

Example 1:

Input:
N = 4, M = 3 
valueN[] = {5,10,15,40}
valueM[] = {2,3,20}
Output: 2 3 5 10 15 20 40
Explanation: After merging the two linked
lists, we have merged list as 2, 3, 5,
10, 15, 20, 40.
Example 2:

Input:
N = 2, M = 2
valueN[] = {1,1}
valueM[] = {2,4}
Output:1 1 2 4
Explanation: After merging the given two
linked list , we have 1, 1, 2, 4 as
output.
Your Task:
The task is to complete the function sortedMerge() which takes references to the heads of two linked lists as the arguments and returns the head of merged linked list.

Expected Time Complexity : O(n+m)
Expected Auxilliary Space : O(1)

Constraints:
1 <= N, M <= 104
1 <= Node's data <= 105



class LinkedList
{
    //Function to merge two sorted linked list.
    Node sortedMerge(Node h1, Node h2) {
        int c=count(h1);
        int c1=count(h2);
        int a[]=new int[c+c1];
        int i=0;
        for(Node ptr=h1;ptr!=null;ptr=ptr.next)
        {
            a[i++]=ptr.data;
        }
        for(Node ptr=h2;ptr!=null;ptr=ptr.next)
        {
            a[i++]=ptr.data;
        }
        Arrays.sort(a);
        Node start=null,fresh,prev=null;
        for(int j=0;j<i;j++)
        {
            fresh=new Node(a[j]);
            if(start==null)
            {
                start=fresh;
            }
            else
            {
                prev.next=fresh;
            }
            prev=fresh;
        }
        return start;
   }
   int count(Node head)
   {
       int c=0;
       for(Node ptr=head;ptr!=null;ptr=ptr.next)
       {
           c++;
       }
       return c;
   }
}